<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Christian Pontesegger: Jenkins 5: Combo Boxes</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-2437011945491490661</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-5-combo-boxes.html</link>
	<description>Combo boxes are the next UI element we will add to our builder.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_05_combo_input.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_05_combo_input.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/05_combo_input&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: UI Definition&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;In the &lt;i&gt;config.jelly&lt;/i&gt; file we simply define that we want to use a combo box:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Build Delay&quot; field=&quot;buildDelay&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:select /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;The definition does not contain entries to select. These will be populated by the &lt;i&gt;Descriptor&lt;/i&gt; class.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;Step 2: Item Definition&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Jenkins will look for a method called &lt;i&gt;doFill&amp;lt;field&amp;gt;Items&lt;/i&gt; in our &lt;i&gt;Descriptor&lt;/i&gt; class to populate the combo. We are doing a first approach now to understand the scheme:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;  public ListBoxModel doFillBuildDelayItems() {&lt;br /&gt;   ListBoxModel model = new ListBoxModel();&lt;br /&gt;   &lt;br /&gt;   model.add(new Option(&quot;None&quot;, &quot;none&quot;));&lt;br /&gt;   model.add(new Option(&quot;Short&quot;, &quot;short&quot;));&lt;br /&gt;   model.add(new Option(&quot;Long&quot;, &quot;long&quot;));&lt;br /&gt;   &lt;br /&gt;   return model;&lt;br /&gt;  }&lt;/pre&gt;&lt;i&gt;ListBoxModel&lt;/i&gt; is basically an &lt;i&gt;ArrayList&lt;/i&gt; of &lt;i&gt;Option&lt;/i&gt; instances. The first string represents the text visible to the user, the second one the value that will actually be stored in our variable (see next step).&lt;br /&gt;&lt;br /&gt;If we would populate the combo this way, the first item would always be selected by default, even if we re-open a job that was configured differently. The &lt;i&gt;Option&lt;/i&gt; constructor allows for a third parameter defining the selected state. We then just need to know the value that got stored with the job definition. Therefore we can inject the desired query parameter into our method parameters:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;  public ListBoxModel doFillBuildDelayItems(@QueryParameter String buildDelay) {&lt;br /&gt;   ListBoxModel model = new ListBoxModel();&lt;br /&gt;&lt;br /&gt;   model.add(new Option(&quot;None&quot;, &quot;none&quot;, &quot;none&quot;.equals(buildDelay)));&lt;br /&gt;   model.add(new Option(&quot;Short&quot;, &quot;short&quot;, &quot;short&quot;.equals(buildDelay)));&lt;br /&gt;   model.add(new Option(&quot;Long&quot;, &quot;long&quot; , &quot;long&quot;.equals(buildDelay)));&lt;br /&gt;&lt;br /&gt;   return model;&lt;br /&gt;  }&lt;br /&gt;&lt;/pre&gt;Now &lt;i&gt;buildDelay&lt;/i&gt; contains the value that got stored by the user when the build step was originally configured. By comparing its string representation we can set the right option in the combo. Typically combo options could be populated from an Enum. To reduce the risk of typos we could write a small helper to create our &lt;i&gt;Options&lt;/i&gt;: &lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static Option createOption(Enum&amp;lt;?&amp;gt; enumOption, String jobOption) {&lt;br /&gt;  return new Option(enumOption.toString(), enumOption.name(), enumOption.name().equals(jobOption));&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Step 3: Glueing it all together&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Finally we need to extend our constructor with the new parameter. Then we can use it in our build step:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private String fBuildDelay;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild, String buildMessage, String buildDelay) {&lt;br /&gt;  fBuildDelay = buildDelay;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt;  listener.getLogger().println(getBuildMessage());&lt;br /&gt;&lt;br /&gt;  switch (getBuildDelay()) {&lt;br /&gt;  case &quot;long&quot;:&lt;br /&gt;   Thread.sleep(10 * 1000);&lt;br /&gt;   break;&lt;br /&gt;&lt;br /&gt;  case &quot;short&quot;:&lt;br /&gt;   Thread.sleep(3 * 1000);&lt;br /&gt;   break;&lt;br /&gt;&lt;br /&gt;  case &quot;none&quot;:&lt;br /&gt;   // fall through&lt;br /&gt;  default:&lt;br /&gt;   // nothing to do&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getBuildDelay() {&lt;br /&gt;  return fBuildDelay;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 03 Dec 2018 14:59:41 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 4: Unit Tests</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-3716468409058011391</guid>
	<link>http://codeandme.blogspot.com/2018/12/jenkins-4-unit-tests.html</link>
	<description>Now that our builder plugin is working we should start writing some unit tests for it.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_04_unit_test.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_04_unit_test.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/04_unit_test&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Wrinting a simple test case&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Jenkins tests can be written as JUnit tests. The test instance needed for execution tests can be created using a &lt;i&gt;JUnit Rule&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;Create a new &lt;i&gt;JUnit Test Case&lt;/i&gt; &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilderTes&lt;/i&gt;t in the &lt;i&gt;src/test/java&lt;/i&gt; folder:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilderTest {&lt;br /&gt;&lt;br /&gt; @Rule&lt;br /&gt; public JenkinsRule fJenkinsInstance = new JenkinsRule();&lt;br /&gt; &lt;br /&gt; @Test&lt;br /&gt; public void successfulBuild() throws Exception {&lt;br /&gt;  HelloBuilder builder = new HelloBuilder(false, &quot;JUnit test run&quot;);&lt;br /&gt;  &lt;br /&gt;  FreeStyleProject job = fJenkinsInstance.createFreeStyleProject();&lt;br /&gt;  job.getBuildersList().add(builder);&lt;br /&gt;  FreeStyleBuild build = fJenkinsInstance.buildAndAssertSuccess(job);&lt;br /&gt;  &lt;br /&gt;  fJenkinsInstance.assertLogContains(&quot;JUnit test run&quot;, build);&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;In line 4 we create a test instance for our unit test. This instance is used from line 10 onwards to create and run our test job. The instance provides a set of assertion commands which we use to check the build result and the log output of the job execution.&lt;br /&gt;&lt;br /&gt;You can run these tests as JUnit tests right from Eclipse or you can execute them via maven by running&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn test&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: A test expecting an execution fail&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We use the same approach as before. To check for a failed build we need to run the build job a little bit different:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; @Test&lt;br /&gt; public void failedBuild() throws Exception {&lt;br /&gt;  HelloBuilder builder = new HelloBuilder(true, &quot;JUnit test fail&quot;);&lt;br /&gt;  &lt;br /&gt;  FreeStyleProject job = fJenkinsInstance.createFreeStyleProject();&lt;br /&gt;  job.getBuildersList().add(builder);&lt;br /&gt;  QueueTaskFuture&amp;lt;FreeStyleBuild&amp;gt; buildResult = job.scheduleBuild2(0);&lt;br /&gt;  &lt;br /&gt;  fJenkinsInstance.assertBuildStatus(Result.FAILURE, buildResult);&lt;br /&gt;  fJenkinsInstance.assertLogContains(&quot;JUnit test fail&quot;, buildResult.get());&lt;br /&gt; }&lt;/pre&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 03 Dec 2018 14:18:12 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Maximilian and Jonas: Eclipse Che vs. Eclipse Theia</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40696</guid>
	<link>https://eclipsesource.com/blogs/2018/12/03/eclipse-che-vs-eclipse-theia/</link>
	<description>&lt;p&gt;In this article, we compare Eclipse Che with Eclipse Theia and explain their relationship – their differences and their overlap. In...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/12/03/eclipse-che-vs-eclipse-theia/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Che vs. Eclipse Theia&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 03 Dec 2018 10:34:54 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.6.0 released !</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-0-released</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-6-0-released</link>
	<description>&lt;article&gt;&lt;p&gt;We are pleased to announce the Eclipse Vert.x 3.6.0 release.&lt;/p&gt;
&lt;p&gt;As always, the community contributions have been key in achieving this milestone. 
To all of you who participated: thank you, you are awesome!&lt;/p&gt;
&lt;p&gt;Without further ado, let’s take a look at some of the most exciting new features and enhancements.  &lt;/p&gt;
&lt;h4 id=&quot;vert-x-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/h4&gt;
&lt;p&gt;In this release we introduce the &lt;a href=&quot;https://github.com/vert-x3/vertx-cassandra-client&quot;&gt;Vert.x Cassandra client&lt;/a&gt;, an extension for interation with &lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Apache Cassandra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The client supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prepared queries&lt;/li&gt;
&lt;li&gt;batching&lt;/li&gt;
&lt;li&gt;query streaming&lt;/li&gt;
&lt;li&gt;bulk fetching&lt;/li&gt;
&lt;li&gt;low level fetching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To give you an idea of how the API usage may looks like, we provide this example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;cassandraClient.queryStream(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT my_string_col FROM my_keyspace.my_table where my_key = 'my_value'&quot;&lt;/span&gt;, queryStream -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (queryStream.succeeded()) {
    CassandraRowStream stream = queryStream.result();

    &lt;span class=&quot;hljs-comment&quot;&gt;// resume stream when queue is ready to accept buffers again&lt;/span&gt;
    response.drainHandler(v -&amp;gt; stream.resume());

    stream.handler(row -&amp;gt; {
        String value = row.getString(&lt;span class=&quot;hljs-string&quot;&gt;&quot;my_string_col&quot;&lt;/span&gt;);
        response.write(value);

        &lt;span class=&quot;hljs-comment&quot;&gt;// pause row stream when we buffer queue is full&lt;/span&gt;
        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (response.writeQueueFull()) {
        stream.pause();
        }
    });

    &lt;span class=&quot;hljs-comment&quot;&gt;// end request when we reached end of the stream&lt;/span&gt;
    stream.endHandler(end -&amp;gt; response.end());

    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    queryStream.cause().printStackTrace();
    &lt;span class=&quot;hljs-comment&quot;&gt;// response with internal server error if we are not able to execute given query&lt;/span&gt;
    response
        .setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;500&lt;/span&gt;)
        .end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Unable to execute the query&quot;&lt;/span&gt;);
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;vert-x-for-kotlin&quot;&gt;Vert.x for Kotlin&lt;/h4&gt;
&lt;p&gt;Vert.x for Kotlin has been updated to the very recent Kotlin 1.3 (and coroutines 1.0).&lt;/p&gt;
&lt;p&gt;Vert.x 3.5 introduced a powerful way to write synchronous non-blocking code with Kotlin coroutines:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&amp;gt; { client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) }, it) };&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this release, &lt;code&gt;awaitResult&lt;/code&gt; idiom as extension methods are provided, so now you can directly write:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = client.queryWithParamsAwait(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(id) })&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note the &lt;code&gt;Await&lt;/code&gt; suffix: all Vert.x asynchronous methods provide now an &lt;em&gt;awaitified&lt;/em&gt; extension.&lt;/p&gt;
&lt;h4 id=&quot;web-api-gateways&quot;&gt;Web API gateways&lt;/h4&gt;
&lt;p&gt;The new &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt; module allows you to
 create &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;Vert.x Web API Contract&lt;/a&gt; gateways.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Web API Service Architecture&quot; src=&quot;http://vertx.io/assets/blog/vertx-web-api-service/vertx-web-api-service.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@WebApiServiceGen&lt;/code&gt; can annotate your service interface to handle
&lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI 3&lt;/a&gt;: &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;Vert.x Web API Service&lt;/a&gt;
requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-annotation&quot;&gt;@WebApiServiceGen&lt;/span&gt;
&lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;TransactionService&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;getTransactionsList&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String from, String to, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;

  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;putTransaction&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(JsonObject body, OperationRequest context, Handler&amp;gt; resultHandler)&lt;/span&gt;&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;OpenAPI3RouterFactory&lt;/code&gt; web router becomes an API gateway sending requests directly to your services.&lt;/p&gt;
&lt;p&gt;These services are powered by the Vert.x &lt;a href=&quot;https://vertx.io/docs/vertx-core/java/#event_bus&quot;&gt;event bus&lt;/a&gt; and benefits
 from features like load balancing and clustering.&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;https://vertx.io/docs/vertx-web-api-service/java/&quot;&gt;complete documentation&lt;/a&gt; for more details (a tutorial post is coming soon!)&lt;/p&gt;
&lt;h4 id=&quot;web-client&quot;&gt;Web Client&lt;/h4&gt;
&lt;p&gt;Our beloved &lt;a href=&quot;https://vertx.io/docs/vertx-web-client/java/&quot;&gt;WebClient&lt;/a&gt; is now capable of handling client sessions. The
&lt;code&gt;WebClientSession&lt;/code&gt; is a client extension that is very helpful when you need to manage cookies on the client side.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// The session is created per user&lt;/span&gt;
&lt;span class=&quot;hljs-comment&quot;&gt;// from now on cookies are handled by the session&lt;/span&gt;
WebClientSession session = WebClientSession.create(client);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cherry on the cake, the web client is now capable of performing server side response checks using &lt;em&gt;response predicates&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;client
  .get(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;myserver.mycompany.com&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;/some-uri&quot;&lt;/span&gt;)
  .expect(ResponsePredicate.SC_SUCCESS)
  .expect(ResponsePredicate.JSON)
  .send(result -&amp;gt; { ... });&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server side response must validate the expectations defined before sending the request in order to make the response
successful, relieving the user code to perform these checks manually. Of course many out of box expecations are provided
and you can always create your own to implement custom checks.&lt;/p&gt;
&lt;h4 id=&quot;use-templating-everywhere&quot;&gt;Use templating everywhere&lt;/h4&gt;
&lt;p&gt;Template engines can now be used outside the realm of Vert.x Web.
One great use case is to use them to generate email content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;TemplateEngine template = ...

template.render(new JsonObject(), &quot;my-template.txt, res -&amp;gt; {
   // Send result with the Vert.x Mail client
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;openid-connect-discovery&quot;&gt;OpenID Connect Discovery&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://vertx.io/docs/vertx-auth-oauth2/java/&quot;&gt;Oauth2&lt;/a&gt; has been greatly enhanced to support more of OpenID Connect, the most noticible is the support of &lt;code&gt;OpenID Connect Discovery 1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What this means for the end user is that, configuration is now a trivial task, as it is “&lt;em&gt;discoverd&lt;/em&gt;“ from the server, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;OpenIDConnectAuth.discover(vertx,
  &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; OAuth2ClientOptions()
    .setSite(&lt;span class=&quot;hljs-string&quot;&gt;&quot;https://accounts.google.com&quot;&lt;/span&gt;)
    .setClientID(&lt;span class=&quot;hljs-string&quot;&gt;&quot;clientId&quot;&lt;/span&gt;),
  res -&amp;gt; {
    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (res.succeeded()) {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup call succeeded.&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// at this moment your auth is ready to use and&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// google signature keys are loaded so tokens can be decoded and verified.&lt;/span&gt;
    } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// the setup failed.&lt;/span&gt;
    }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know your &lt;strong&gt;clientId&lt;/strong&gt; and your provider server URL (of course), all the remaining endoints, key signature algorithms and &lt;em&gt;JSON Web Keys&lt;/em&gt; are “discovered” for you and
configured to the auth provider.&lt;/p&gt;
&lt;h4 id=&quot;password-hashing-strategy&quot;&gt;Password Hashing strategy&lt;/h4&gt;
&lt;p&gt;Vert.x auth components now support user defined password hashing strategies, If you’re not happy with the provided implementations: &lt;code&gt;SHA512&lt;/code&gt; or &lt;code&gt;PKDBF2&lt;/code&gt; you can now provide your own strategy
so it can be used with &lt;code&gt;JDBC&lt;/code&gt; or &lt;code&gt;Mongo&lt;/code&gt; auth.&lt;/p&gt;
&lt;p&gt;The hash verification algorithm has been improved to be time constant, regardless of the result, which protects Vert.x
applications from hash timing attacks.&lt;/p&gt;
&lt;h4 id=&quot;externalized-configuration-of-vert-x-options&quot;&gt;Externalized configuration of Vert.x options&lt;/h4&gt;
&lt;p&gt;Whether you run your Vert.x app with the CLI or as an executable JAR with the &lt;code&gt;Launcher&lt;/code&gt;, you can now provide Vert.x
options as a command line parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;java -jar &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-app.jar -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or with the CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;vertx &lt;span class=&quot;hljs-command&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;-verticle.js -options /path/&lt;span class=&quot;hljs-keyword&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;hljs-keyword&quot;&gt;my&lt;/span&gt;/&lt;span class=&quot;hljs-type&quot;&gt;file&lt;/span&gt;.json&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly useful for complex clustered event-bus setups (encryption, public host vs cluster host…).&lt;/p&gt;
&lt;h4 id=&quot;and-more-&quot;&gt;And more…&lt;/h4&gt;
&lt;p&gt;Here are some other important improvements you can find in this release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 11 support (unless a Vert.x module depends on a third-party dependency that does not support it yet)&lt;/li&gt;
&lt;li&gt;Hazelcast Cluster Manager &lt;a href=&quot;http://vertx.io/docs/vertx-hazelcast/java/#_using_lite_members&quot;&gt;support for lite members&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api/&quot;&gt;Simplified database transaction management&lt;/a&gt; with the Vert.x &lt;em&gt;Rxified&lt;/em&gt; API&lt;/li&gt;
&lt;li&gt;Event-bus interceptors&lt;/li&gt;
&lt;li&gt;Documentation improvements&lt;ul&gt;
&lt;li&gt;Cluster administration with &lt;a href=&quot;http://vertx.io/docs/vertx-infinispan/java/#_cluster_administration&quot;&gt;Infinispan&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-hazelcast/java/#_cluster_administration&quot;&gt;Hazelcast&lt;/a&gt; cluster managers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rxified&lt;/em&gt; API in the Vert.x &lt;a href=&quot;http://vertx.io/docs/vertx-kafka-client/java/#_rxjava_2_api&quot;&gt;Kafka&lt;/a&gt;, &lt;a href=&quot;http://vertx.io/docs/vertx-web-client/java/#_rxjava_2_api&quot;&gt;Web&lt;/a&gt; and &lt;a href=&quot;http://vertx.io/docs/vertx-mongo-client/java/#_rxjava_2_api&quot;&gt;Mongo&lt;/a&gt; clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Performance improvements&lt;/li&gt;
&lt;li&gt;And obviously we have the usual bug fixes!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Release-Notes&quot;&gt;3.6.0 release notes&lt;/a&gt; can be found on the wiki, as well as the list of &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.0-Deprecations-and-breaking-changes&quot;&gt;deprecations and breaking changes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker images are available on &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Vert.x distribution can be downloaded on the website but is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge is available from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;Bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The release artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.6.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s it! Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Read the newest Jakarta EE Newsletter!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/dt1O2kBXgo4/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/dt1O2kBXgo4/</link>
	<description>This month we bring you a fully loaded Jakarta EE newsletter with a mix of technical content, community news, and a tutorial!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/dt1O2kBXgo4&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Nov 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Specification Process, Part III: Creation</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/BW1bPhgIRzI/eclipse-foundation-specification-process-part-iii-creation</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/BW1bPhgIRzI/eclipse-foundation-specification-process-part-iii-creation</link>
	<description>Creation' is an integral part of the Eclipse Foundation Specification Process. Read Wayne Beaton's newest blog on the topic.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/BW1bPhgIRzI&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 30 Nov 2018 14:15:00 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 1: IDE Setup and an Empty Plugin</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-5182433312839995136</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-1-ide-setup-and-empty-plugin.html</link>
	<description>I recently started to write my first Jenkins plugin and I thought I share the experience with you. For that reason I started a new series of tutorials.&lt;br /&gt;&lt;br /&gt;Today we are building a simple Jenkins plugin using Eclipse. The basic steps of this tutorial are extracted from the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Plugin+tutorial&quot; target=&quot;_blank&quot;&gt;Jenkins Plugin Tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_01_empty_plugin.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_01_empty_plugin.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/01_empty_plugin&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;&lt;b&gt;&lt;u&gt;Prerequisites&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;As you are interested in writing a plugin for &lt;a href=&quot;https://jenkins.io/&quot; target=&quot;_blank&quot;&gt;Jenkins&lt;/a&gt; I expect that you have a rough idea what Jenkins is used for and how to administer it.&lt;br /&gt;&lt;br /&gt;While our build environment allows to run a test instance of Jenkins with our plugin enabled I also liked to have a 'real' Jenkins instance available to test my plugins. Therefore I use &lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot;&gt;docker&lt;/a&gt; to quickly get started with a woking Jenkins installation.&lt;br /&gt;&lt;br /&gt;Once &lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/debian/&quot; target=&quot;_blank&quot;&gt;you have installed docker&lt;/a&gt; (&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-debian-9&quot; target=&quot;_blank&quot;&gt;extended tutorial for debian&lt;/a&gt;), you can download the latest Jenkins container by using&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker pull jenkins/jenkins:lts&lt;/pre&gt;&lt;br /&gt;Now run your container using&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts&lt;/pre&gt;&lt;br /&gt;After the startup process your server is reachable via &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;To manage containers use commands&lt;br /&gt;&lt;pre class=&quot;brush: shell&quot;&gt;docker container ls&lt;br /&gt;docker container stop &amp;lt;container name&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: Maven configuration&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;We will need &lt;a href=&quot;https://maven.apache.org/&quot; target=&quot;_blank&quot;&gt;maven &lt;/a&gt;installed and ready for creating the project, building and testing it, so make sure you have set it up correctly.&lt;br /&gt;&lt;br /&gt;Maven needs some configuration ready to learn about jenkins plugins, therefore you need to adapt the configuration file slightly. On linux change &lt;i&gt;~/.m2/settings.xml&lt;/i&gt;, on windows modify/create &lt;i&gt;%USERPROFILE%\.m2\settings.xml&lt;/i&gt; and set following content:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;settings&amp;gt;&lt;br /&gt; &amp;lt;pluginGroups&amp;gt;&lt;br /&gt;  &amp;lt;pluginGroup&amp;gt;org.jenkins-ci.tools&amp;lt;/pluginGroup&amp;gt;&lt;br /&gt; &amp;lt;/pluginGroups&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;profiles&amp;gt;&lt;br /&gt;  &amp;lt;!-- Give access to Jenkins plugins --&amp;gt;&lt;br /&gt;  &amp;lt;profile&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;jenkins&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;activation&amp;gt;&lt;br /&gt;    &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;&lt;br /&gt;   &amp;lt;/activation&amp;gt;&lt;br /&gt;   &amp;lt;repositories&amp;gt;&lt;br /&gt;    &amp;lt;repository&amp;gt;&lt;br /&gt;     &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;     &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;    &amp;lt;/repository&amp;gt;&lt;br /&gt;   &amp;lt;/repositories&amp;gt;&lt;br /&gt;   &amp;lt;pluginRepositories&amp;gt;&lt;br /&gt;    &amp;lt;pluginRepository&amp;gt;&lt;br /&gt;     &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;     &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;    &amp;lt;/pluginRepository&amp;gt;&lt;br /&gt;   &amp;lt;/pluginRepositories&amp;gt;&lt;br /&gt;  &amp;lt;/profile&amp;gt;&lt;br /&gt; &amp;lt;/profiles&amp;gt;&lt;br /&gt; &amp;lt;mirrors&amp;gt;&lt;br /&gt;  &amp;lt;mirror&amp;gt;&lt;br /&gt;   &amp;lt;id&amp;gt;repo.jenkins-ci.org&amp;lt;/id&amp;gt;&lt;br /&gt;   &amp;lt;url&amp;gt;https://repo.jenkins-ci.org/public/&amp;lt;/url&amp;gt;&lt;br /&gt;   &amp;lt;mirrorOf&amp;gt;m.g.o-public&amp;lt;/mirrorOf&amp;gt;&lt;br /&gt;  &amp;lt;/mirror&amp;gt;&lt;br /&gt; &amp;lt;/mirrors&amp;gt;&lt;br /&gt;&amp;lt;/settings&amp;gt;&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;Hint:&lt;/b&gt; On windows I had to remove the settings file &lt;i&gt;&amp;lt;maven install folder&amp;gt;\conf\settings.xml&lt;/i&gt; as it was used in favor of my profile settings.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Create the plugin skeleton&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To create the initial project open a shell and execute:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:empty-plugin&lt;/pre&gt;You will be asked some questions how your plugin should be configurated: &lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;[INFO] Scanning for projects...&lt;br /&gt;[INFO]                                                                         &lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] Building Maven Stub Project (No POM) 1&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] &amp;gt;&amp;gt;&amp;gt; maven-archetype-plugin:3.0.1:generate (default-cli) &amp;gt; generate-sources @ standalone-pom &amp;gt;&amp;gt;&amp;gt;&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] &amp;lt;&amp;lt;&amp;lt; maven-archetype-plugin:3.0.1:generate (default-cli) &amp;lt; generate-sources @ standalone-pom &amp;lt;&amp;lt;&amp;lt;&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---&lt;br /&gt;[INFO] Generating project in Interactive mode&lt;br /&gt;[INFO] No archetype defined. Using maven-archetype-quickstart (org.apache.maven.archetypes:maven-archetype-quickstart:1.0)&lt;br /&gt;Choose archetype:&lt;br /&gt;1: remote -&amp;gt; io.jenkins.archetypes:empty-plugin (Skeleton of a Jenkins plugin with a POM and an empty source tree.)&lt;br /&gt;Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): : 1&lt;br /&gt;Choose io.jenkins.archetypes:empty-plugin version: &lt;br /&gt;1: 1.0&lt;br /&gt;2: 1.1&lt;br /&gt;3: 1.2&lt;br /&gt;4: 1.3&lt;br /&gt;5: 1.4&lt;br /&gt;Choose a number: 5: &lt;br /&gt;[INFO] Using property: groupId = unused&lt;br /&gt;Define value for property 'artifactId': builder.hello&lt;br /&gt;Define value for property 'version' 1.0-SNAPSHOT: : &lt;br /&gt;[INFO] Using property: package = unused&lt;br /&gt;Confirm properties configuration:&lt;br /&gt;groupId: unused&lt;br /&gt;artifactId: builder.hello&lt;br /&gt;version: 1.0-SNAPSHOT&lt;br /&gt;package: unused&lt;br /&gt; Y: : &lt;br /&gt;[INFO] ----------------------------------------------------------------------------&lt;br /&gt;[INFO] Using following parameters for creating project from Archetype: empty-plugin:1.4&lt;br /&gt;[INFO] ----------------------------------------------------------------------------&lt;br /&gt;[INFO] Parameter: groupId, Value: unused&lt;br /&gt;[INFO] Parameter: artifactId, Value: builder.hello&lt;br /&gt;[INFO] Parameter: version, Value: 1.0-SNAPSHOT&lt;br /&gt;[INFO] Parameter: package, Value: unused&lt;br /&gt;[INFO] Parameter: packageInPathFormat, Value: unused&lt;br /&gt;[INFO] Parameter: version, Value: 1.0-SNAPSHOT&lt;br /&gt;[INFO] Parameter: package, Value: unused&lt;br /&gt;[INFO] Parameter: groupId, Value: unused&lt;br /&gt;[INFO] Parameter: artifactId, Value: builder.hello&lt;br /&gt;[INFO] Project created from Archetype in dir: ~/Eclipse/codeandme.blogspot.com/ws/builder.hello&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] BUILD SUCCESS&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] Total time: 36.202 s&lt;br /&gt;[INFO] Finished at: 2018-11-27T20:34:15+01:00&lt;br /&gt;[INFO] Final Memory: 16M/169M&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;We just created the basic skeleton files and could start working right away. But as we want to do it the eclipse way we need to convert the project to a proper eclipse project. Therefore change into the created project directory and execute:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn -DdownloadSources=true -DdownloadJavadocs=true -DoutputDirectory=target/eclipse-classes eclipse:eclipse&lt;/pre&gt;&lt;br /&gt;The first run might take some time as maven has to fetch tons of dependencies. So sit back and enjoy the show...&lt;br /&gt;&lt;br /&gt;Once this step is done we can import our project using the Eclipse import wizard using &lt;i&gt;File / Import...&lt;/i&gt; and then select&lt;i&gt; General/Existing Projects into Workspace&lt;/i&gt;. On the following page select the project folder that was created by maven.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Update configuration files&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The created &lt;i&gt;pom.xml&lt;/i&gt; file for our plugin provides a good starting point for development. Typically you might want to update it a little before you actually start coding. Fields like &lt;i&gt;name&lt;/i&gt;, &lt;i&gt;description&lt;/i&gt;, &lt;i&gt;license &lt;/i&gt;should be pretty clear. More interesting is&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;    &amp;lt;properties&amp;gt;&lt;br /&gt;        &amp;lt;jenkins.version&amp;gt;2.7.3&amp;lt;/jenkins.version&amp;gt;&lt;br /&gt;        &amp;lt;java.level&amp;gt;7&amp;lt;/java.level&amp;gt;&lt;br /&gt;    &amp;lt;/properties&amp;gt;&lt;/pre&gt;Upgrading the java level to 8 should be pretty safe these days. Further Jenkins 2.7.3 is really outdated. To check out which versions are available you may browse the &lt;a href=&quot;https://repo.jenkins-ci.org/webapp/#/artifacts/browse/tree/General/releases/org/jenkins-ci/main/jenkins-war&quot; target=&quot;_blank&quot;&gt;jenkins artifactory server&lt;/a&gt;. Open the &lt;i&gt;jenkins-war&lt;/i&gt; node and search for a version you would like to use.&lt;br /&gt;&lt;br /&gt;I further adapt the &lt;i&gt;.project&lt;/i&gt; file and remove the &lt;i&gt;groovyNature&lt;/i&gt; as I am going to write some java code later.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Build &amp;amp; Deploy the Plugin&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To build your plugin simply run&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn package&lt;/pre&gt;This will build and test your package. Further it creates an installable *.hpi package in the &lt;i&gt;com.codeandme.jenkins.helloworld/target&lt;/i&gt; folder.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 5: Test the plugin in a test instance&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;To see your plugin in action you might want to execute it in a test instance of Jenkins. Maven will help us to set this up:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn hpi:run -Djetty.port=8090&lt;/pre&gt;After the boot phase, open up your browser and point to &lt;a href=&quot;http://localhost:8090/jenkins&quot;&gt;http://localhost:8090/jenkins&lt;/a&gt; to access your test instance.&lt;br /&gt;&lt;br /&gt;Writing a simple builder will be our next step, stay tuned for the next tutorial.</description>
	<pubDate>Thu, 29 Nov 2018 14:13:55 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms 1.18.0 Feature: Label Layouting</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40082</guid>
	<link>https://eclipsesource.com/blogs/2018/11/29/emf-forms-1-18-0-feature-label-layouting/</link>
	<description>&lt;p&gt;EMF Forms makes it easy to create forms that are capable of editing your data based on an EMF model. To...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/11/29/emf-forms-1-18-0-feature-label-layouting/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms 1.18.0 Feature: Label Layouting&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 29 Nov 2018 10:34:57 +0000</pubDate>
</item>
<item>
	<title>William Candillon: Hello world!</title>
	<guid isPermaLink="false">http://xqdt.org?p=1</guid>
	<link>http://xqdt.org/2018/11/29/hello-world/</link>
	<description>&lt;p&gt;WordPress へようこそ。これは最初の投稿です。編集もしくは削除してブログを始めてください !&lt;/p&gt;</description>
	<pubDate>Thu, 29 Nov 2018 09:56:15 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process, Part III: Creation</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5466</guid>
	<link>https://waynebeaton.wordpress.com/2018/11/28/eclipse-foundation-specification-process-part-iii-creation/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://www.eclipse.org/projects/efsp/&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) includes an &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;image&lt;/a&gt; that provides an overview of what goes into creating a new &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-projects&quot;&gt;Specification Project&lt;/a&gt;. By &lt;em&gt;creating&lt;/em&gt;, we mean the process of taking a &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-specifications&quot;&gt;Specification&lt;/a&gt; from an initial idea or concept through to the point where the necessary resources and permissions are in place to do real development. It’s the same basic process that we follow when creating a regular Eclipse Project with an extra Specifications-specific approval added in.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;creation&quot; class=&quot;alignnone size-full wp-image-5465&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/11/creation.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The first couple of steps of the project creation process usually happen via private email exchanges between the people involved with the project and the &lt;em&gt;Eclipse Management Organization&lt;/em&gt; (EMO) (this is one of the few things that we do in private at the Eclipse Foundation). With this communication, we take the idea behind a Specification Project and create a Proposal that describes and defines it. The Proposal includes important information like a statement of Scope, a description, and the list of the initial Specification Team (&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#4_6_2_PL&quot;&gt;Project Leads&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-committers&quot;&gt;Committers&lt;/a&gt;, and &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_1_Mentors&quot;&gt;Mentors&lt;/a&gt;). Other useful information is contained the Proposal, including background information, descriptions of content that already exists, and initial plans.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In the steady state (i.e. after the Specification Project has been created), all roles are assigned via demonstrations of merit and votes from the existing Committers. Since we have no existing Committers before the project is created, the creation process serves as the display of merit for the community and vote.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The EMO works with the proposers to whip the Proposal into shape. When the EMO decides that the content is complete, it is delivered to the Executive Director of the Eclipse Foundation (EMO(ED)) for approval to post for community review.&lt;/p&gt;
&lt;p&gt;Once we have EMO(ED) approval and the Proposal is posted for the community to review, it is said—according to the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP)—to have entered the &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_2_Proposal&quot;&gt;Proposal Phase&lt;/a&gt;&lt;/em&gt;. We often refer to this as the &lt;em&gt;community review period&lt;/em&gt;. During this period, other developers may step up and volunteer to become Committers, community members may ask questions, the Scope and other aspects of the Proposal may be tweaked, and more. Crucially, during this period, Member Companies of the Eclipse Foundation have an opportunity to express concerns and even (possibly) reject the Project Proposal (this has never actually happened). A Specification Project must stay in the Proposal Phase for a minimum of two weeks to give the various stakeholders enough time to review and respond.&lt;/p&gt;
&lt;p&gt;The EMO uses the Proposal Phase to ensure that we can reasonably assert ownership of the Specification Project’s name as a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#trademarks-background&quot;&gt;trademark&lt;/a&gt; on behalf of the community (or at least that the project name does not infringe on somebody else’s trademark). If a Specification Project’s name is already used by the Specification Team (or an organization that’s involved with the Proposal), then EMO will work with them to transfer ownership of the trademark and associated Internet domains to the Eclipse Foundation. In parallel, the EMO will also work with the Eclipse Architecture Council to identify a Mentor, and seek approval from the Project Management Committee (PMC) of the target Top-level Project. It’s not shown on the image, but we’d use this time to inform the corresponding &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-committee&quot;&gt;Specification Committee&lt;/a&gt; that the new Specification Project is coming.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;At the Eclipse Foundation, we organize all Projects and Specification Projects hierarchically. Top-level Projects, which sit at the the top level of the hierarchy, are generally not used for actual development work. It is in the Projects (also referred to as Subprojects) under the Top-level Projects where the &lt;em&gt;real&lt;/em&gt; work happens. All Top-level Projects have a PMC who—as part of the Project Leadership Chain for all projects that fall under the Top-level Project—are responsible for ensuring that the Specification Teams work as good open source projects (as defined by the EDP).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When all of these separate threads are resolved, we move to the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;Creation Review&lt;/a&gt;. During this period, no further changes are allowed and the Proposal is locked down. The EMO uses this time to ensure that the process was followed. The Creation Review lasts for a minimum of one week. We schedule all reviews—Creation Reviews included—based on the date that they conclude; reviews are scheduled to conclude on the first and third Wednesday of every month (we may schedule additional reviews in exceptional cases).&lt;/p&gt;
&lt;p&gt;To successfully complete a Creation Review for a Specification Project, the EFSP requires that we have &lt;em&gt;Super-majority&lt;/em&gt; approval of the Specification Committee (Super-majority is defined as two thirds of the Specification Committee members). The EFSP is silent regarding the specifics of how such a vote is executed, but is generally accepted that votes run for a minimum of a week (a Specification Committee may decide that more or less time is required). The factors that the Specification Committee must consider when casting their votes are also not specified. In general though, the Specification Committee will be looking at whether or not new Specification Project Proposals are viable and are a good fit with the corresponding Working Group.&lt;/p&gt;
&lt;p&gt;Upon successful conclusion of the Creation Review, the Proposal is sent to the Eclipse &lt;em&gt;Webmaster Team&lt;/em&gt; for provisioning. The provisioning process starts with &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#paperwork&quot;&gt;Committer Paperwork&lt;/a&gt;: once we have complete paperwork for one Committer, the Webmaster will create resources including websites, Git repositories, Issue trackers, etc. for the Specification Team.&lt;/p&gt;
&lt;p&gt;With provisioned Committers and resources, the Specification Project is said to be in the &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_2_3_Incubation&quot;&gt;Incubation Phase&lt;/a&gt;&lt;/em&gt; (or “in incubation”); it will stay in this phase until the Specification Team engages in a &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/#6_3_2_Graduation_Review&quot;&gt;Graduation Review&lt;/a&gt; (which is generally combined with the project’s first or second Release and corresponding &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-release&quot;&gt;Release Review&lt;/a&gt;). The first action of the Specification Team with their new Specification Project is to submit their &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-initial-contribution&quot;&gt;Initial Contribution&lt;/a&gt; (when a Specification comes to the Eclipse Foundation with existing intellectual property) to the Eclipse IP Team for review; with their approval of the Initial Contribution, that content can be added to the project’s Git repository and the Specification Team can start to weave their magic.&lt;/p&gt;
&lt;p&gt;For more background, please see &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;Part I&lt;/a&gt;, and &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/&quot;&gt;Part II&lt;/a&gt; of this series.&lt;/p&gt;</description>
	<pubDate>Wed, 28 Nov 2018 16:22:31 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 3: Text Input &amp; Validation</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-604671243835936878</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-3-text-input-validation.html</link>
	<description>Our builder UI is progressing: today we will add a text box with nice defaults and add input validation to it.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_03_text_input.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_03_text_input.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/03_text_input&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;b&gt;&lt;u&gt;Step 1: The Text Box&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Adding a text box is as simple as adding the checkbox before. Add a new entry to the &lt;i&gt;config.jelly&lt;/i&gt; file:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Custom build message&quot; field=&quot;buildMessage&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:textbox /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;Make sure you use a unique ID for &lt;i&gt;field&lt;/i&gt;. Then add the new field to your builder by adding it to the constructor and create a getter for it:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private String fBuildMessage;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild, String buildMessage) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt;  fBuildMessage = buildMessage;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(getBuildMessage());&lt;br /&gt;  &lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public String getBuildMessage() {&lt;br /&gt;  return fBuildMessage;&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;All done, give it a try!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Default Value&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Some example data might help our users when filling out the buid parameters. Therefore lets provide a nice default value. This is done by adding a &lt;i&gt;default&lt;/i&gt; attribute to the textbox:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;f:textbox default=&quot;${descriptor.getDefaultBuildMessage()}&quot; /&amp;gt;&lt;/pre&gt;We could have provided the default text directly in the attribute data. Instead we decided to fetch the default dynamically from the &lt;i&gt;Descriptor&lt;/i&gt; class. No magic data binding here, so we need to implement the method:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;  &lt;br /&gt;  public String getDefaultBuildMessage() {&lt;br /&gt;   return &quot;This is a great build&quot;;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;u&gt;&lt;b&gt;Step 3: Input Validation&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;Having no build message would result in an empty log file, which is not what we want. With input validation we can force users to enter some text to the input box. Validation is done by providing a validator in the &lt;i&gt;Descriptor&lt;/i&gt; class:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;&lt;br /&gt;  public FormValidation doCheckBuildMessage(@QueryParameter String buildMessage) {&lt;br /&gt;   if (buildMessage.isEmpty())&lt;br /&gt;    return FormValidation.error(&quot;Please provide a build message.&quot;);&lt;br /&gt;   else if (buildMessage.trim().isEmpty())&lt;br /&gt;    return FormValidation.error(&quot;White space is not sufficient for a build message.&quot;);&lt;br /&gt;   else&lt;br /&gt;    return FormValidation.ok();&lt;br /&gt;  }&lt;br /&gt; }&lt;/pre&gt;The method name needs to stick to the pattern &lt;i&gt;doCheck&amp;lt;Parameter&amp;gt;&lt;/i&gt;. Normally you would only provide the parameter in question to that method (again the parameter name needs to match your &lt;i&gt;field&lt;/i&gt; ID) but if needed you could add parameters for other fields of the builder. This comes in handy when parameters depend on each other.</description>
	<pubDate>Wed, 28 Nov 2018 10:07:21 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Christian Pontesegger: Jenkins 2: A Builder Plugin &amp; Some Jelly</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-7581451498191257505</guid>
	<link>http://codeandme.blogspot.com/2018/11/jenkins-2-builder-plugin-some-jelly.html</link>
	<description>In the previous tutorial we did the basic setup for jenkins plugin development. Now we will try to create a plugin that actually runs a build step.&lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Jenkins Tutorials&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;&lt;br /&gt;For a list of all jenkins related tutorials see &lt;a href=&quot;https://codeandme.blogspot.com/p/jenkins-articles.html&quot; target=&quot;_blank&quot;&gt;Jenkins Tutorials Overview.&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div style=&quot;margin: 0px;&quot;&gt;Source code for this tutorial is available on github as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.zip?raw=true&quot;&gt;single zip archive&lt;/a&gt;, as a &lt;a href=&quot;https://github.com/Pontesegger/codeandme/blob/master/Code%20&amp;amp;%20Me%20Blog/jenkins_02_builder_plugin.psf?raw=true&quot;&gt;Team Project Set&lt;/a&gt; or you can &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/02_builder_plugin&quot; target=&quot;_blank&quot;&gt;browse the files&lt;/a&gt; online.&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 1: The Basic Builder&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Maven allows to create a nice template for a builder plugin by calling&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn archetype:generate -Dfilter=io.jenkins.archetypes:&lt;/pre&gt;then select the &lt;i&gt;hello-world-plugin&lt;/i&gt;. But as we want to do it the hard way, we will add every single bit on our own and continue with the &lt;a href=&quot;https://github.com/Pontesegger/codeandme/tree/master/jenkins/01_empty_plugin&quot; target=&quot;_blank&quot;&gt;empty project&lt;/a&gt; from our &lt;a href=&quot;https://codeandme.blogspot.com/2018/11/jenkins-1-ide-setup-and-empty-plugin.html&quot; target=&quot;_blank&quot;&gt;previous tutorial&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The first thing we need is a class to implement our builder. Lets create a simple one. Create a new class &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;:&lt;br /&gt;&lt;pre class=&quot;brush: java&quot;&gt;package com.codeandme.jenkins.builder;&lt;br /&gt;&lt;br /&gt;import java.io.IOException;&lt;br /&gt;&lt;br /&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder() {&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Symbol(&quot;hello&quot;)&lt;br /&gt; @Extension&lt;br /&gt; public static final class Descriptor extends BuildStepDescriptor&amp;lt;Builder&amp;gt; {&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public boolean isApplicable(Class&amp;lt;? extends AbstractProject&amp;gt; aClass) {&lt;br /&gt;   return true;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @Override&lt;br /&gt;  public String getDisplayName() {&lt;br /&gt;   return &quot;Code &amp;amp; Me - Hello World&quot;;&lt;br /&gt;  }&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Jenkins expects the constructor to be augmented with the &lt;i&gt;@DataBoundConstructor&lt;/i&gt; annotation. Later we will add our build parameters to it.&lt;br /&gt;&lt;br /&gt;The &lt;i&gt;perform()&lt;/i&gt; method is the heart of our implementation. This is where we define what the build step should actually do. In this tutorial we focus on the definition, not the execution so we are just printing some log message to detect that our build step got triggered.&lt;br /&gt;&lt;br /&gt;Now lets put our focus on the &lt;i&gt;Descriptor&lt;/i&gt; class. It actually describes what our plugin looks like, what parameter it uses and whether the user input is valid or not. You need to use a static class as a descriptor and augment it with the &lt;i&gt;@Extension&lt;/i&gt; annotation to allow jenkins to detect it automatically.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;isApplicable()&lt;/i&gt; might be the most important one as it denotes if ou plugin is usable for the current project type.&lt;br /&gt;&lt;br /&gt;Start a jenkins test server using&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;mvn hpi:run -Djetty.port=8090&lt;/pre&gt;Create a new &lt;i&gt;Freestyle Project&lt;/i&gt; and add your custom build step to it. Then execute the job and browse the log for our log message.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 2: Basic UI&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Next we need a &lt;i&gt;*.jelly&lt;/i&gt; file to describe how the UI should look like. Therefore create a new package in &lt;i&gt;src/main/resources&lt;/i&gt; named &lt;i&gt;com.codeandme.jenkins.builder.HelloBuilder&lt;/i&gt;. That is right, the package equals the class name of our builder class. Then create a &lt;i&gt;config.jelly&lt;/i&gt; file inside that package:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;&amp;lt;?jelly escape-by-default='true'?&amp;gt;&lt;br /&gt;&amp;lt;j:jelly xmlns:j=&quot;jelly:core&quot; xmlns:st=&quot;jelly:stapler&quot; xmlns:d=&quot;jelly:define&quot; xmlns:l=&quot;/lib/layout&quot; xmlns:t=&quot;/lib/hudson&quot; xmlns:f=&quot;/lib/form&quot;&amp;gt;&lt;br /&gt;&lt;br /&gt; &amp;lt;f:block&amp;gt;&lt;br /&gt;  &amp;lt;h1&amp;gt;Code &amp;amp;amp; Me Productions&amp;lt;/h1&amp;gt;&lt;br /&gt;  &amp;lt;p&amp;gt;We build the best &amp;lt;i&amp;gt;hellos&amp;lt;/i&amp;gt; in the world&amp;lt;/p&amp;gt;&lt;br /&gt; &amp;lt;/f:block&amp;gt;&lt;br /&gt;&lt;br /&gt;&amp;lt;/j:jelly&amp;gt;&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Inside the jelly definition we can use plain HTML code. Run your test instance again to see your changes in your project configuration view.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 3: Checkbox Input&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Time to add some input. All build parameters need at least 2 steps of implementation: first we need to define the UI in the &lt;i&gt;config.jelly&lt;/i&gt; file, then we need to define the parameters in the java class. Optionally we may add additional checks in the Descriptor class.&lt;br /&gt;&lt;br /&gt;To define the UI for the checkbox we add following code to our jelly file:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt; &amp;lt;f:entry title=&quot;Fail this build&quot; field=&quot;failBuild&quot;&amp;gt;&lt;br /&gt;  &amp;lt;f:checkbox /&amp;gt;&lt;br /&gt; &amp;lt;/f:entry&amp;gt;&lt;/pre&gt;This will create a label using the &lt;i&gt;title&lt;/i&gt; field and a checkbox on the right side of the label. The &lt;i&gt;field&lt;/i&gt; name is important as this is the ID of our field which we now use in the Java code:&lt;br /&gt;&lt;pre class=&quot;brush: xml&quot;&gt;public class HelloBuilder extends Builder implements SimpleBuildStep {&lt;br /&gt;&lt;br /&gt; private boolean fFailBuild;&lt;br /&gt;&lt;br /&gt; @DataBoundConstructor&lt;br /&gt; public HelloBuilder(boolean failBuild) {&lt;br /&gt;  fFailBuild = failBuild;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; @Override&lt;br /&gt; public void perform(Run&amp;lt;?, ?&amp;gt; run, FilePath workspace, Launcher launcher, TaskListener listener)&lt;br /&gt;   throws InterruptedException, IOException {&lt;br /&gt;  listener.getLogger().println(&quot;This is the Hello plugin!&quot;);&lt;br /&gt;&lt;br /&gt;  if (isFailBuild())&lt;br /&gt;   throw new AbortException(&quot;Build error forced by plugin settings&quot;);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; public boolean isFailBuild() {&lt;br /&gt;  return fFailBuild;&lt;br /&gt; }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The new parameter needs to be added to our constructor. Make sure you use the same name as in the jelly file. Additionally we need a getter for our parameter. It will be queried to populate the UI when you configure your job and when the job gets executed. Jenkins expects the name of the getter to match the field name of your jelly file.&lt;br /&gt;&lt;br /&gt;During the build we evaluate our parameter and throw an &lt;i&gt;AbortException&lt;/i&gt; in case our builder is expected to fail.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Step 4: Adding Help&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Lots of parameters in Jenkins plugins show a help button on the righthand side of the form. These buttons automatically appear when corresponding help files exist in the right location.&lt;br /&gt;&lt;br /&gt;A general help file for the builder named &lt;i&gt;help.html&lt;/i&gt; needs to be placed next to the &lt;i&gt;config.jelly&lt;/i&gt; file. You may add any arbitrary HTML content there, with no need to use &lt;i&gt;&amp;lt;html&amp;gt;&lt;/i&gt; or &lt;i&gt;&amp;lt;body&amp;gt;&lt;/i&gt; tags.&lt;br /&gt;&lt;br /&gt;To provide help for our checkbox we create another help file named &lt;i&gt;help-failBuild.html&lt;/i&gt;. See the pattern? We again use the field ID and Jenkins figures out the rest.&lt;br /&gt;&lt;br /&gt;Instead of a plain HTML files we could also &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins#BasicguidetoJellyusageinJenkins-Helpfiles&quot; target=&quot;_blank&quot;&gt;provide jelly files&lt;/a&gt; following the same name pattern.&lt;br /&gt;&lt;br /&gt;Changes like adding help or beautifying jelly files can be done without restarting our test instance. Simply change the file and reload the page in your webbrowser of your test instance.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Further reading&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Good documentation on writing forms seems to be rare on the internet. To me the best choice seems to be to find an existing plugin and browse the source code for reference. At least a &lt;a href=&quot;https://reports.jenkins.io/core-taglib/jelly-taglib-ref.html#form&quot; target=&quot;_blank&quot;&gt;list of all control types&lt;/a&gt; is available online.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 28 Nov 2018 09:21:30 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Maximilian and Jonas: How to inversify() in Eclipse Theia</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=40623</guid>
	<link>https://eclipsesource.com/blogs/2018/11/28/how-to-inversify-in-eclipse-theia/</link>
	<description>&lt;p&gt;In this article we will describe the basic concepts of dependency injection with inversify, which are required to implement extensions for...&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2018/11/28/how-to-inversify-in-eclipse-theia/&quot; rel=&quot;nofollow&quot;&gt;How to inversify() in Eclipse Theia&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 28 Nov 2018 09:15:49 +0000</pubDate>
</item>
<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 0.8.0</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-11-28-release-announcement-080.html</guid>
	<link>https://www.eclipse.org/ditto/2018-11-28-release-announcement-080.html</link>
	<description>&lt;p&gt;Today the Eclipse Ditto team proudly presents its first release 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.8.0&quot;&gt;0.8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_080.html&quot;&gt;0.8.0 release notes&lt;/a&gt; for a more detailled information on the release.&lt;/p&gt;

&lt;p&gt;The main changes and new features since the latest milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_080-M3.html&quot;&gt;0.8.0-M3&lt;/a&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support Eclipse Hono’s command&amp;amp;control in Ditto connectivity&lt;/li&gt;
  &lt;li&gt;several smaller bugfixes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 28 Nov 2018 05:00:00 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: SiriusCon 2018 is SiriusCon Live!</title>
	<guid isPermaLink="false">https://cedric.brun.io/eclipse/siriuscon-2018</guid>
	<link>https://cedric.brun.io/eclipse/siriuscon-2018/</link>
	<description>&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/siriuscon/banner-2018.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/siriuscon/banner-2018.png&quot; /&gt;&lt;/a&gt;    
&lt;/figure&gt;

&lt;p&gt;Each year November and December months are what I would call “very busy months”, but each year I have this event I know will be awesome which is &lt;strong&gt;&lt;a href=&quot;https://www.siriuscon.org/&quot;&gt;SiriusCon&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius&lt;/a&gt; is a technology used to create &lt;strong&gt;modeling environments&lt;/strong&gt; using graphical modelers, tables, trees or form editors. This technology is an enabler to &lt;strong&gt;capture your expertise, your methodology&lt;/strong&gt; and then share it within your organization or toward customers. Compared to other comparable technologies Sirius gives results with low efforts, does not require you to be able to code and is &lt;strong&gt;Open-Source&lt;/strong&gt; with a license which does not restrict your ability to deliver your tool the way you see fit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SiriusCon&lt;/strong&gt; is THE event for graphical modeling, an opportunity to get experience reports from users of the technology, to expose and discuss the project progress, to share roadmaps and to engage with the community.&lt;/p&gt;

&lt;p&gt;Obeo has been hosting SiriusCon &lt;strong&gt;3 years in a row&lt;/strong&gt; in Paris, each edition was a success and an energizing moment for the teams and me.&lt;/p&gt;

&lt;p&gt;Sirius &lt;strong&gt;as a technology&lt;/strong&gt; is evolving, improving on the user experience of diagram editors, offering new features and simultaneously embracing the web and cloud-based environments.&lt;/p&gt;

&lt;p&gt;Sirius &lt;strong&gt;as a community&lt;/strong&gt; is growing, the &lt;a href=&quot;http://www.eclipse.org/forums/eclipse.sirius&quot;&gt;project forum&lt;/a&gt; see more newcomers, basically one every 3 days while on the same period last year it was one every 4 days.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://cedric.brun.io/images/blog/siriuscon/forum.png&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/siriuscon/forum.png&quot; /&gt;&lt;/a&gt;    
    Stats from the Sirius Forum
&lt;/figure&gt;

&lt;p&gt;The Sirius community knows no border users Japan, North Africa, Canada, United States, Columbia and many other countries reached out to us while they are building their domain specific tooling on top of Sirius. It became obvious that we had to evolve our event.&lt;/p&gt;

&lt;p&gt;Hence, &lt;strong&gt;SiriusCon Live!&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;The event is now Online, &lt;strong&gt;fully accessible through the web&lt;/strong&gt; and composed of two half days: the first one more interesting to explorers getting in touch with the technology (4th of December) while the second half-day  will feature more technical content (5th of December).&lt;/p&gt;

&lt;p&gt;We kept the same principles: deep technical content, feedback from the trenches, exclusive information about the roadmap and the community involvement to set the pace for the next few years!&lt;/p&gt;

&lt;p&gt;I for one am excited to hear experience reports from the &lt;strong&gt;NASA&lt;/strong&gt; - Robust Software Engineering Group when the Insight Lander just arrived on Mars, from the &lt;strong&gt;CEA&lt;/strong&gt; - DAM which have to manage incredibly complex simulations, from &lt;strong&gt;Atrris Corporation&lt;/strong&gt; in Japan, building their RAD tool, Pexa, from &lt;strong&gt;Altran - Netherlands&lt;/strong&gt; which went deep in integrating Xtext editors and Sirius Diagrams, from &lt;strong&gt;I-BP&lt;/strong&gt; which improved the user experience of their tool by leveraging the form based editors and from &lt;strong&gt;Thales&lt;/strong&gt; which have a unique perspective as they are building Capella on top of Sirius for more than 10 years now.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;How &lt;a href=&quot;https://twitter.com/NASA?ref_src=twsrc%5Etfw&quot;&gt;@NASA&lt;/a&gt; is using &lt;a href=&quot;https://twitter.com/EclipseSirius?ref_src=twsrc%5Etfw&quot;&gt;@EclipseSirius&lt;/a&gt; to develop Safety Cases. Register to &lt;a href=&quot;https://twitter.com/hashtag/SiriusCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#SiriusCon&lt;/a&gt; to follow the online presentation by Ewen Denney the 4th of December &lt;a href=&quot;https://t.co/Asx27xLklh&quot;&gt;https://t.co/Asx27xLklh&lt;/a&gt; &lt;a href=&quot;https://t.co/i9zHU7Lf6X&quot;&gt;pic.twitter.com/i9zHU7Lf6X&lt;/a&gt;&lt;/p&gt;— Frédéric Madiot (@fmadiot) &lt;a href=&quot;https://twitter.com/fmadiot/status/1067081078245154817?ref_src=twsrc%5Etfw&quot;&gt;26 novembre 2018&lt;/a&gt;&lt;/blockquote&gt;


&lt;p&gt;More than &lt;strong&gt;130 peoples from more than 30 countries&lt;/strong&gt; already “in” for this online event, registering is a &lt;a href=&quot;https://bit.ly/SiriusCon2018Registration&quot;&gt;few clicks away&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bit.ly/SiriusCon2018Registration&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cedric.brun.io/images/blog/siriuscon/register.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I sincerely hope you’ll enjoy it, we are working hard to make it a success :-)&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;https://cedric.brun.io/eclipse/siriuscon-2018/&quot;&gt;SiriusCon 2018 is SiriusCon Live!&lt;/a&gt; was originally published by Cédric Brun at &lt;a href=&quot;https://cedric.brun.io&quot;&gt;CEO @ Obeo&lt;/a&gt; on November 28, 2018.&lt;/p&gt;</description>
	<pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (Cédric Brun)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Specification Process, Part II: the EFSP</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/t_8Jiz5Z73A/eclipse-foundation-specification-process-part-ii-efsp</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/t_8Jiz5Z73A/eclipse-foundation-specification-process-part-ii-efsp</link>
	<description>The Eclipse Foundation Specification Process defines a general framework for developing specifications in open source at the Eclipse Foundation.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/t_8Jiz5Z73A&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 27 Nov 2018 17:15:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: How is the Eclipse Foundation Specification Process (EFSP) different from Java Community Process (JCP)?</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/0k99bTm_OFc/how-eclipse-foundation-specification-process-efsp-different-java-community</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/0k99bTm_OFc/how-eclipse-foundation-specification-process-efsp-different-java-community</link>
	<description>There are many differences between Eclipse Foundation Specification Process (EFSP) and Java Community Process (JCP), let's focus on my top 5!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/0k99bTm_OFc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 27 Nov 2018 17:15:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Finding Symmetry</title>
	<guid isPermaLink="false">https://medium.com/p/27944c74b6d4</guid>
	<link>https://medium.com/oracledevs/finding-symmetry-27944c74b6d4?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Evolving the design of &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; through symmetry.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*V20XrVJpyEhsPGcGFyDlwQ.png&quot; /&gt;Got Eclipse Collections stickers?&lt;/figure&gt;&lt;h3&gt;Find the Missing Types&lt;/h3&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/777/1*Gs6oL36CsN69d4aJPmBsag.png&quot; /&gt;New Eclipse Collections types on the left add to the existing JDK types on the right&lt;/figure&gt;&lt;p&gt;Eclipse Collections has a bunch of new types you will not find in the JDK. These types give developers useful functionality that they need. There is an extra cost to supporting additional container types, especially when you factor in having support for primitive types across these types.&lt;/p&gt;&lt;p&gt;These missing types are important. They help Eclipse Collections return better return types for iteration patterns.&lt;/p&gt;&lt;h3&gt;Type Symmetry&lt;/h3&gt;&lt;p&gt;Eclipse Collections has pretty good symmetry between object and primitive types.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/984/1*fqryL65gBdF6lRMdrY2G2w.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The missing container types are fixed sized primitive arrays, primitive BiMaps, primitive Multimaps, and some of the primitive Intervals (only IntInterval exists today). String really only should exist as a primitive immutable collection of either char or int. Eclipse Collections has &lt;em&gt;CharAdapter&lt;/em&gt;, &lt;em&gt;CodePointAdapter&lt;/em&gt; and &lt;em&gt;CodePointList&lt;/em&gt; which provide a rich set of iteration protocols that work with &lt;em&gt;Strings&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;API Symmetry&lt;/h3&gt;&lt;p&gt;There is still much that can be done to improve the symmetry between the object and primitive APIs. There are some APIs that cannot be replicated without adding new types. For instance, it would be less than desirable to implement a primitive version of groupBy with the current Multimap implementations because the only option would be to box the primitive &lt;em&gt;Lists&lt;/em&gt;, &lt;em&gt;Sets&lt;/em&gt; or &lt;em&gt;Bags&lt;/em&gt;. Since there are a large number of APIs in Eclipse Collections, I will only draw attention to some of the major APIs that do not currently have symmetry between object and primitive collections. The following methods are missing on the primitive iterables.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;groupBy / groupByEach&lt;/li&gt;&lt;li&gt;countBy / countByEach&lt;/li&gt;&lt;li&gt;aggregateBy / aggregateInPlaceBy&lt;/li&gt;&lt;li&gt;partition&lt;/li&gt;&lt;li&gt;reduce / reduceInPlace&lt;/li&gt;&lt;li&gt;toMap&lt;/li&gt;&lt;li&gt;&lt;strong&gt;All “With” methods&lt;/strong&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Of all the missing APIs on primitive collections perhaps the most subtle and yet glaring difference is the lack of &lt;strong&gt;“With” &lt;/strong&gt;methods. It is not clear if the “With” methods would be as useful for primitive collections as they are with object collections. For some usage examples of the “With” methods on the object collection APIs, read my blog titled &lt;a href=&quot;https://medium.com/@donraab/preposition-preference-1f1c709b098b&quot;&gt;“Preposition Preference”&lt;/a&gt;. The “With” methods allow for more APIs to be used with Method References.&lt;/p&gt;&lt;p&gt;This is what the signatures for some of the “With” methods might look like on &lt;em&gt;IntList&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean anySatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean allSatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; boolean noneSatisfyWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; IntList selectWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;pre&gt;&amp;lt;P&amp;gt; IntList rejectWith(IntObjectPredicate&amp;lt;? super P&amp;gt; predicate, P parameter);&lt;/pre&gt;&lt;h3&gt;Default Methods to the Rescue&lt;/h3&gt;&lt;p&gt;The addition of default methods in Java 8 has been of tremendous help increasing the symmetry between our object and primitive APIs. In Eclipse Collections 10.x we will be able to leverage default methods even more, as we now have the ability to use container factory classes in interfaces. The following examples show how the default implementations of &lt;em&gt;countBy&lt;/em&gt; and &lt;em&gt;countByWith&lt;/em&gt; has been optimized using the &lt;em&gt;Bags&lt;/em&gt; factory.&lt;/p&gt;&lt;pre&gt;default &amp;lt;V&amp;gt; Bag&amp;lt;V&amp;gt; countBy(Function&amp;lt;? super T, ? extends V&amp;gt; function)&lt;br /&gt;{&lt;br /&gt;    return this.countBy(function, Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;pre&gt;default &amp;lt;V, P&amp;gt; Bag&amp;lt;V&amp;gt; countByWith(Function2&amp;lt;? super T, ? super P, ? extends V&amp;gt; function, P parameter)&lt;br /&gt;{&lt;br /&gt;    return this.countByWith(function, parameter,&lt;br /&gt;        Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;More on Eclipse Collections API design&lt;/h3&gt;&lt;p&gt;To find out more about the design of the &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; API, check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design/#/&quot;&gt;slide deck&lt;/a&gt; and the following presentation.&lt;/p&gt;&lt;a href=&quot;https://medium.com/media/2ab2cb59ae47379914362745e7bbc2ee/href&quot;&gt;https://medium.com/media/2ab2cb59ae47379914362745e7bbc2ee/href&lt;/a&gt;&lt;p&gt;You can also find a set of visualizations of the Eclipse Collection library in &lt;a href=&quot;https://medium.com/oracledevs/visualizing-eclipse-collections-646dad9533a9&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=27944c74b6d4&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/finding-symmetry-27944c74b6d4&quot;&gt;Finding Symmetry&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Tue, 27 Nov 2018 04:15:37 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: How is the Eclipse Foundation Specification Process (EFSP) different from Java Community Process (JCP)?</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6661 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/how-eclipse-foundation-specification-process-efsp-different-java-community</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;By now most of you are aware already that Oracle has contributed Java EE specification to open source, and into Eclipse Foundation. The Java enterprise community decided to rename the Java EE specification to Jakarta EE. Part of this huge transition to open source is changing the specification process. The famous Java Community Process (JCP) is going to be replaced by Eclipse Foundation Specification Process (EFSP), that will be better suited for vendor neutrality, transparency and all other attributes associated with open source. So what exactly is different?&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;There are many differences between Eclipse Foundation Specification Process (EFSP) and Java Community Process (JCP), but let’s focus on my top 5!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;img src=&quot;https://lh5.googleusercontent.com/o-4vx8ZpdhKclU4UkSA46Ymz4nhdV7xR7HuY_62LQQ9lOQDK_bcHgGeDDe20mgPQ4jDZ9AR1ikCd4au_yNFhzeCm-OfsafhKDVlRRxKuuwDfq0IOaNAK_6y873AXj4enq357lQBR&quot; style=&quot;float: left; height: 351px; width: 624px;&quot; /&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt; &lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Code First&lt;/strong&gt;: While JCP proposed to have a Specification document created first, EFSP will be based on hands-on experimenting and coding first, as a way to prove something is worthy of documenting in a specification.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Collaborative&lt;/strong&gt;: EFSP is defined and managed by Jakarta EE Working Group members, which is governed as a vendor-neutral group, and will be used by the wider Jakarta community for a specification creation and implementation. Ensuring a level playing field for everyone in the WG to participate in Specification creation is done via collaboration.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Documents and TCKs are open &lt;/strong&gt;&lt;strong&gt;source&lt;/strong&gt;: The key benefits of EFSP are producing documents and TCKs that are open source. This means the following for the community: Transparency, Openness, Shared Burden and Vendor Neutrality. You can refer to this &lt;a href=&quot;https://blogs.eclipse.org/post/tanja-obradovic/java-ee-tck-now-open-sourced-eclipse-foundation&quot;&gt;open source TCK blog&lt;/a&gt; for additional insights. Opening the Specification to the community and having them influence the technical direction and provide feedback enables a large pool of people to get involved, which ultimately results in better quality! Transparency, openness, vendor neutrality were not part of the JCP.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Compatible Implementations&lt;/strong&gt;: The JCP required that each specification version have a corresponding Reference Implementation. EFSP will be requiring at least one Compatible Implementation of a specification, we are welcoming and encouraging other implementations of the specification and are avoiding singling out or favoring particular implementations or a vendor.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Self-certification&lt;/strong&gt;: The certification process for EFSP we utilize a self-serve model, thus lowering the costs and effort involved in carrying out certifications.  There is an explicit requirement for all test results to be made publicly available so verification can be carried out.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Specification processes’ are, by their nature, involved, detailed, and fairly complex.  Care has been taken to ensure the overhead associated with engaging in the spec process is no more significant than it needs to be.  But, we will learn as we progress, and expect to tweak the process further based on this ongoing learning.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;We hope you’ll get involved!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-foundation-specification-process&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/efsp&quot;&gt;EFSP&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/java-community-process&quot;&gt;Java Community Process&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jcp&quot;&gt;jcp&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/java-ee&quot;&gt;java ee&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakarta-ee&quot;&gt;Jakarta EE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/specification&quot;&gt;Specification&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/specification-process&quot;&gt;Specification Process&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 26 Nov 2018 19:40:28 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Foundation Specification Process, Part II: the EFSP</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5460</guid>
	<link>https://waynebeaton.wordpress.com/2018/11/26/eclipse-foundation-specification-process-part-ii-the-efsp/</link>
	<description>&lt;p&gt;The Eclipse Foundation Specification Process defines a general framework for developing specifications in open source at the Eclipse Foundation; it extends the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process&quot;&gt;Eclipse Development Process&lt;/a&gt; (EDP) by adding a few extra checks and balances. In the &lt;a href=&quot;https://waynebeaton.wordpress.com/2018/11/07/eclipse-foundation-specification-process-part-i-the-edp/&quot;&gt;first installment&lt;/a&gt; of this series, we described the EDP; in this second installment, we introduce the &lt;a href=&quot;https://www.eclipse.org/projects/efsp&quot;&gt;Eclipse Foundation Specification Process&lt;/a&gt; (EFSP) with a focus on how it extends the EDP. We’ll provide more detail and tackle why it’s implemented as it is in future installments.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Note that we’re using the same form of pseudo-legal style capitalization of defined terms that we use in the EDP, EFSP, and other policy documents in this post.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Like regular Eclipse open source projects, a &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-projects&quot;&gt;Specification Project&lt;/a&gt;&lt;/em&gt; starts life as a &lt;em&gt;Proposal&lt;/em&gt; with a description, scope, list of committers, and more; goes through an iterative development cycle that produces one or more &lt;em&gt;Milestone builds&lt;/em&gt;; and then engages in a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#release&quot;&gt;release process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;efsp_lifecycle&quot; class=&quot; size-full wp-image-5458 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2018/11/efsp_lifecycle1.png?w=640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Unlike a regular Project, a Specification Project must be aligned with exactly one Eclipse Foundation &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/org/workinggroups/&quot;&gt;Working Group&lt;/a&gt;&lt;/em&gt;. The Working Group designates a &lt;em&gt;Specification Committee&lt;/em&gt; that maintains and manages the specification process on the Working Group’s behalf (when we talk about &lt;em&gt;the&lt;/em&gt; Specification Committee in the context of a Specification Project, we mean the Specification Committee of the Working Group with which the Specification Project is aligned).&lt;/p&gt;
&lt;p&gt;A Specification Project must get approval from the corresponding Specification Committee to pass key project lifecycle events. In this regard, the role of the Specification Committee is very similar to the governance role of the Java Community Process’ (JCP) Executive Committee.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It’s worth noting that the EFSP provides the general framework for doing specifications in open source at the Eclipse Foundation and that we expect multiple Working Groups to leverage it for that purpose. We also fully expect that a Specification Committee will augment the process as it’s defined. We expect, for example, that we will have a &lt;a href=&quot;https://jakarta.ee/&quot;&gt;Jakarta EE&lt;/a&gt; Specification Process that uses the EFSP as its foundation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The Specification Committee needs to approve of the creation of a Specification Project from a Proposal by taking a role in the &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-creation&quot;&gt;Creation Review&lt;/a&gt;. The expectation is that the Specification Committee members will consider the details of the proposed Specification Project (with particular focus on the &lt;em&gt;Scope&lt;/em&gt;) before making their decision. In addition to the requirements defined by the EDP, a Super-majority affirmative vote of the entire Specification Committee is required to approve a Creation Review.&lt;/p&gt;
&lt;p&gt;Following successful creation and provisioning of project resources, the Specification Project begins development. During the development cycle, the project team must produce at least one Milestone build of the specification’s content (documentation and technical artifacts) to solicit feedback, and at least one of the Milestone builds must serve as a trigger to engage in a &lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-progress&quot;&gt;Progress Review&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Progress Reviews, a new addition to the EDP (introduced with the &lt;a href=&quot;https://www.eclipse.org/projects/dev_process/development_process_2018/&quot;&gt;2018 version&lt;/a&gt;), are roughly equivalent to &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-release&quot;&gt;Release Reviews&lt;/a&gt;, but with the intent of ensuring that the Specification Project is progressing in a manner that will ultimately result in a successful release. A Specification Committee and Project Leadership may compel a Specification Project to engage in additional Progress Reviews.&lt;/p&gt;
&lt;p&gt;For a Progress Review, the Project Management Committee (PMC), and Eclipse Management Organization (EMO) validate that the Project Team is following the EDP and EFSP, and that the Eclipse Foundation’s Intellectual Property Policy is being correctly implemented. The EFSP further requires that the Specification Committee approve a Progress Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;At the end of every release cycle, the project team must produce a &lt;em&gt;Release Candidate&lt;/em&gt; build that we label as a &lt;em&gt;Specification Version&lt;/em&gt; and then engages in a Release Review. For a Release Review, the PMC, EMO, and Specification Committee all engage in the same sorts of activities that they do for a Progress Review, but with the understanding that approval results in the ratification of the specification and promotion to an official status. The EFSP requires that the Specification Committee approve a Release Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;Following a successful Release Review, the final release version of the Specification Artifacts are considered &lt;em&gt;Ratified&lt;/em&gt; and morph into what the process refers to as a &lt;em&gt;Final Specification&lt;/em&gt;. It is the Final Specification that must be used to build Compatible Implementations.&lt;/p&gt;
&lt;p&gt;Following a successful first release (and every subsequent release thereafter), and before engaging in any further development of the specification, the project team must assemble and present their Plan for review by the Specification Committee via &lt;a href=&quot;https://www.eclipse.org/projects/efsp/#efsp-reviews-plan&quot;&gt;Plan Review&lt;/a&gt;. The notion of a Plan Review is specific to the EFSP (since Plan Reviews are not part of the EDP, no formal involvement from the PMC is required). A Plan Review provides the Specification Committee with an opportunity to ensure that the plan for the next Specification Version is in-scope, fits within the overall vision of the Working Group, and is otherwise charting a path to eventual ratification and release. The EFSP requires that the Specification Committee approve a Plan Review by Super-majority vote.&lt;/p&gt;
&lt;p&gt;After the Plan is approved, the Project Team engages in Development as before.&lt;/p&gt;
&lt;p&gt;We’ll discuss the relationship between Specification Projects, Working Groups, and Specification Committees; what happens when the Specification Committee does not approve a vote; the relationship between a Specification Version and Final Specification; and more in future posts.&lt;/p&gt;
&lt;p&gt;Mike and I delivered a talk about this at EclipseCon Europe 2018, titled “&lt;a href=&quot;https://www.eclipsecon.org/europe2018/sessions/directors-pick-introducing-eclipse-foundation-specification-process&quot;&gt;Introducing The Eclipse Foundation Specification Process&lt;/a&gt;” (or go directly to &lt;a href=&quot;https://www.youtube.com/watch?v=rZ3zx2UAG9c&amp;amp;list=PLy7t4z5SYNaQ82WyePL05PFwqNmfTxhwD&amp;amp;index=93&quot;&gt;the video&lt;/a&gt; on our YouTube Channel).&lt;/p&gt;</description>
	<pubDate>Mon, 26 Nov 2018 17:49:15 +0000</pubDate>
</item>

</channel>
</rss>
